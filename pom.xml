<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>io.thorntail.openshift.ts</groupId>
    <artifactId>ts-parent</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <packaging>pom</packaging>

    <name>Thorntail Openshift TS: Parent</name>

    <modules>
        <!--<module>common</module>-->
        <module>rest-http</module>

    </modules>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

        <arquillian-cube.version>1.15.3</arquillian-cube.version>

        <version.java>1.8</version.java>

        <version.io.fabric8.docker-maven-plugin>0.25.2</version.io.fabric8.docker-maven-plugin>
        <version.javax.enterprise.cdi-api>1.2</version.javax.enterprise.cdi-api>
        <version.junit.junit>4.12</version.junit.junit>
        <version.org.assertj.assertj-core>3.9.1</version.org.assertj.assertj-core>
        <version.org.apache.httpcomponents.httpclient>4.5.5</version.org.apache.httpcomponents.httpclient>
        <version.org.apache.maven.plugins.maven-clean-plugin>3.1.0</version.org.apache.maven.plugins.maven-clean-plugin>
        <version.org.apache.maven.plugins.maven-compiler-plugin>3.7.0</version.org.apache.maven.plugins.maven-compiler-plugin>
        <version.org.apache.maven.plugins.maven-dependency-plugin>3.1.0</version.org.apache.maven.plugins.maven-dependency-plugin>
        <version.org.apache.maven.plugins.maven-resources-plugin>3.0.2</version.org.apache.maven.plugins.maven-resources-plugin>
        <version.org.apache.maven.plugins.maven-surefire-plugin>2.21.0</version.org.apache.maven.plugins.maven-surefire-plugin>
        <version.org.apache.maven.plugins.maven-war-plugin>3.2.0</version.org.apache.maven.plugins.maven-war-plugin>
        <version.org.awaitility>3.1.0</version.org.awaitility>
        <version.org.honton.chas.process-exec-maven-plugin>0.9.2</version.org.honton.chas.process-exec-maven-plugin>
        <version.org.jboss.arquillian>1.2.1.Final</version.org.jboss.arquillian> <!-- some tests fail with 1.3+, not yet sure why -->
        <version.org.jboss.arquillian.drone>2.5.1</version.org.jboss.arquillian.drone>
        <version.org.jboss.remotingjmx>3.0.0.Final</version.org.jboss.remotingjmx>
        <version.org.jboss.resteasy>3.0.24.Final</version.org.jboss.resteasy>
       
        <version.org.wildfly.swarm>2018.6.0-SNAPSHOT</version.org.wildfly.swarm>
        <version.org.xmlunit>2.6.0</version.org.xmlunit>
        <version.restassured>3.0.7</version.restassured>

        <arquillian-cube.version>1.15.3</arquillian-cube.version>
        <fabric8-maven-plugin.version>3.5.38</fabric8-maven-plugin.version>

        <fabric8.generator.from>registry.access.redhat.com/redhat-openjdk-18/openjdk18-openshift:1.2</fabric8.generator.from>

        <fabric8.openshift.trimImageInContainerSpec>true</fabric8.openshift.trimImageInContainerSpec>
        <fabric8.skip.build.pom>true</fabric8.skip.build.pom>
        
    </properties>

    <dependencyManagement>
            <dependencies>
                 <dependency>
                 <groupId>org.arquillian.cube</groupId>
                 <artifactId>arquillian-cube-bom</artifactId>
                 <version>${arquillian-cube.version}</version>
                 <scope>import</scope>
                 <type>pom</type>
            </dependency>

            <!-- modules -->
            <!--<dependency>
                <groupId>org.wildfly.swarm.ts</groupId>
                <artifactId>ts-common</artifactId>
                <version>${project.version}</version>
            </dependency>-->

            <!-- Swarm BOMs -->
            <dependency>
                <groupId>org.wildfly.swarm</groupId>
                <artifactId>bom</artifactId>
                <version>${version.org.wildfly.swarm}</version>
                <scope>import</scope>
                <type>pom</type>
            </dependency>

            <!-- spec dependencies, only for fraction autodetection tests -->
            <dependency>
                <groupId>javax.enterprise</groupId>
                <artifactId>cdi-api</artifactId>
                <version>${version.javax.enterprise.cdi-api}</version>
            </dependency>
           
            <!-- test dependencies -->
            <!--
              - If at all possible, tests should NEVER depend on something that Swarm can bring in transitively.
              - For example, instead of using JSON-P for working with JSON in the tests, use Gson. Instead of
              - using Undertow's WebSocket implementation for implementing the WebSocket client in the tests,
              - use Glassfish's implementation (Tyrus). First, it avoids dependency clashes, which are typically
              - really hard to debug. Second, it provides some level of interoperability testing for free.
              -->
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>${version.junit.junit}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.httpcomponents</groupId>
                <artifactId>fluent-hc</artifactId>
                <version>${version.org.apache.httpcomponents.httpclient}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.httpcomponents</groupId>
                <artifactId>httpclient</artifactId>
                <version>${version.org.apache.httpcomponents.httpclient}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.httpcomponents</groupId>
                <artifactId>httpmime</artifactId>
                <version>${version.org.apache.httpcomponents.httpclient}</version>
            </dependency>
            <dependency>
                <groupId>org.assertj</groupId>
                <artifactId>assertj-core</artifactId>
                <version>${version.org.assertj.assertj-core}</version>
            </dependency>
            <dependency>
                <groupId>org.awaitility</groupId>
                <artifactId>awaitility</artifactId>
                <version>${version.org.awaitility}</version>
                <exclusions>
                    <exclusion>
                        <groupId>junit</groupId>
                        <artifactId>junit</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>org.jboss.arquillian</groupId>
                <artifactId>arquillian-bom</artifactId>
                <version>${version.org.jboss.arquillian}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.jboss.arquillian.extension</groupId>
                <artifactId>arquillian-drone-bom</artifactId>
                <version>${version.org.jboss.arquillian.drone}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.jboss.remotingjmx</groupId>
                <artifactId>remoting-jmx</artifactId>
                <version>${version.org.jboss.remotingjmx}</version>
            </dependency>
            <dependency>
                <groupId>org.xmlunit</groupId>
                <artifactId>xmlunit-core</artifactId>
                <version>${version.org.xmlunit}</version>
            </dependency>
         
            <dependency>
                <groupId>org.jboss.resteasy</groupId>
                <artifactId>resteasy-client</artifactId>
                <version>${version.org.jboss.resteasy}</version>
            </dependency>
            <dependency>
                <groupId>org.jboss.resteasy</groupId>
                <artifactId>resteasy-jackson2-provider</artifactId>
                <version>${version.org.jboss.resteasy}</version>
            </dependency>
            <dependency>
                <groupId>io.rest-assured</groupId>
                <artifactId>rest-assured</artifactId>
                <version>${version.restassured}</version>
                <scope>test</scope> 
            </dependency>
            <dependency>
                <groupId>org.arquillian.cube</groupId>
                <artifactId>arquillian-cube-openshift</artifactId>
                <version>${arquillian-cube.version}</version>
                <exclusions>
                  <exclusion>
                    <groupId>io.undertow</groupId>
                    <artifactId>undertow-core</artifactId>
                  </exclusion>
               </exclusions>
             </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <pluginManagement>
            <plugins>

                <plugin>
		    <groupId>io.fabric8</groupId>
		    <artifactId>fabric8-maven-plugin</artifactId>
                    <version>${fabric8-maven-plugin.version}</version>
		    <executions>
		      <execution>
		        <goals>
		          <goal>resource</goal>
		          <goal>build</goal>
		        </goals>
		      </execution>
		    </executions>
		    <configuration>
		      <generator>
		        <includes>
		          <include>wildfly-swarm</include>
		        </includes>
		        <excludes>
		          <exclude>webapp</exclude>
		        </excludes>
		      </generator>
		      <enricher>
		        <config>
		          <wildfly-swarm-health-check>
		            <path>/</path>
		          </wildfly-swarm-health-check>
		        </config>
		      </enricher>
		    </configuration>
		</plugin>
                <!--<plugin>
                    <groupId>io.fabric8</groupId>
                    <artifactId>docker-maven-plugin</artifactId>
                    <version>${version.io.fabric8.docker-maven-plugin}</version>
                    <configuration>
                        <showLogs>true</showLogs>
                    </configuration>
                    <executions>
                        <execution>
                            <id>start</id>
                            <phase>pre-integration-test</phase>
                            <goals>
                                <goal>start</goal>
                            </goals>
                        </execution>
                        <execution>
                            <id>stop</id>
                            <phase>post-integration-test</phase>
                            <goals>
                                <goal>stop</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>-->
<plugin>
                    <groupId>org.wildfly.swarm</groupId>
                    <artifactId>wildfly-swarm-plugin</artifactId>
                    <version>${version.org.wildfly.swarm}</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>package</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>${version.org.apache.maven.plugins.maven-clean-plugin}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${version.org.apache.maven.plugins.maven-compiler-plugin}</version>
                    <configuration>
                        <source>${version.java}</source>
                        <target>${version.java}</target>
                        <testSource>${version.java}</testSource>
                        <testTarget>${version.java}</testTarget>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <version>${version.org.apache.maven.plugins.maven-dependency-plugin}</version>
                </plugin>
		<plugin>
		    <groupId>org.apache.maven.plugins</groupId>
		    <artifactId>maven-failsafe-plugin</artifactId>
                    <version>${version.org.apache.maven.plugins.maven-surefire-plugin}</version>
		    <configuration>
                        <!-- the default value of "true" is a real pain in multi-module projects -->
                        <failIfNoSpecifiedTests>false</failIfNoSpecifiedTests>
		        <systemPropertyVariables>
			  <app.name>${project.artifactId}</app.name>
		        </systemPropertyVariables>
                        <classpathDependencyExcludes>
                            <classpathDependencyExclude>org.arquillian.cube:arquillian-cube-openshift</classpathDependencyExclude>
                            <classpathDependencyExclude>org.arquillian.cube:arquillian-cube-kubernetes</classpathDependencyExclude>
                        </classpathDependencyExcludes>
 		    </configuration>
                    <dependencies>
                        <dependency>
                            <groupId>org.apache.maven.surefire</groupId>
                            <artifactId>surefire-junit47</artifactId>
                            <version>${version.org.apache.maven.plugins.maven-surefire-plugin}</version>
                        </dependency>
                    </dependencies>
		    <executions>
		      <execution>
			<goals>
			  <goal>integration-test</goal>
			  <goal>verify</goal>
			</goals>
		      </execution>
		    </executions>
                </plugin>               
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>${version.org.apache.maven.plugins.maven-resources-plugin}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${version.org.apache.maven.plugins.maven-surefire-plugin}</version>
                    <configuration>
                        <!-- the default value of "true" is a real pain in multi-module projects -->
                        <failIfNoSpecifiedTests>false</failIfNoSpecifiedTests>
                    </configuration>
                    <dependencies>
                        <dependency>
                            <groupId>org.apache.maven.surefire</groupId>
                            <artifactId>surefire-junit47</artifactId>
                            <version>${version.org.apache.maven.plugins.maven-surefire-plugin}</version>
                        </dependency>
                    </dependencies>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-war-plugin</artifactId>
                    <version>${version.org.apache.maven.plugins.maven-war-plugin}</version>
                    <configuration>
                        <!--
                          - this defaults to false since Maven WAR plugin 3.1.0, but only if the compilation classpath
                          - contains the Servlet API
                          -
                          - some of the testing modules won't have the Servlet API present, but that's OK
                          -->
                        <failOnMissingWebXml>false</failOnMissingWebXml>
                    </configuration>
                </plugin>              

                
            </plugins>
        </pluginManagement>
    </build>


<!--
    <repositories>
        <repository>
            <id>jboss-public-repository-group</id>
            <name>JBoss Public Maven Repository Group</name>
            <url>http://repository.jboss.org/nexus/content/groups/public/</url>
        </repository>
    </repositories>
    <pluginRepositories>
        <pluginRepository>
            <id>jboss-public-repository-group</id>
            <name>JBoss Public Maven Repository Group</name>
            <url>http://repository.jboss.org/nexus/content/groups/public/</url>
        </pluginRepository>
    </pluginRepositories>
-->  

</project>
